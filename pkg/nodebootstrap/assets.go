// Code generated by go-bindata.
// sources:
// assets/10-eksclt.al2.conf
// assets/bootstrap.al2.sh
// assets/bootstrap.ubuntu.sh
// assets/kubelet.yaml
// DO NOT EDIT!

package nodebootstrap

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __10EkscltAl2Conf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\x4f\x6b\xdb\x4e\x10\xbd\xeb\x53\x2c\x24\x87\xdf\x0f\xbc\x52\xe2\xb8\x39\x04\x74\x50\x63\x25\x18\x54\x27\x44\x0e\x2d\xb4\xc5\x8c\x77\xc7\xce\xe0\xd5\xac\xd8\x5d\xd9\x49\x83\xbf\x7b\x91\x65\xb5\x2e\x09\xa5\x37\xed\xbc\x99\xf7\xde\xfc\xd1\x89\xc0\xb5\x57\xc1\x48\x5f\xa3\xa2\x25\x29\xe1\x5f\x7c\xc0\x4a\x0b\xed\x6c\x2d\x89\x45\xc3\x14\xc4\xd2\x3a\xb1\x6e\x16\x68\x30\x0c\xf6\x8f\xac\x82\x1f\x96\x45\x41\xdc\x3c\x8b\xa1\xf8\x2f\x2b\x86\xff\x47\xd1\xd7\x12\xdd\x86\x14\x7e\x8f\x4e\x44\x61\x15\x18\x51\x61\x00\x0d\x01\x44\x0d\x0e\x2a\x0c\xe8\xfc\x95\x78\xc8\x6f\x27\x77\xd3\x81\xc8\x3e\x97\xf3\x71\x7e\x93\x3d\x16\xb3\x79\x17\x8b\x72\xde\x90\xb3\x5c\x21\x87\x1b\x32\x98\x26\x18\x54\xd2\x59\x4c\x7a\xae\x18\x79\x13\x9d\x88\x5b\x63\x17\x60\x04\xb0\x16\x3e\x40\x20\xf5\x87\xc6\x75\xf1\x58\xce\xf2\x87\xf9\x78\x5a\x0e\xc4\xf4\x6e\x9c\xcf\x8b\xec\x63\x5e\xf4\x8f\x59\x36\x99\xce\xca\xbf\xca\x1d\xfa\x3d\xa8\x75\xed\xb0\x65\xf9\x8e\xd8\x9e\x72\x72\x3f\x10\x93\x69\x39\xcb\xa6\xd7\xf9\x7c\x32\xfe\x27\x6e\xd3\xb2\xee\x15\xa2\xfc\x19\x55\x19\xc0\x85\xf4\xe8\x33\x69\xbc\x4b\x16\xc4\x7d\x81\xf8\x16\x09\x21\x25\x5b\x8d\x92\xea\xf4\xf4\xf5\xa0\xbc\x3b\x06\x0c\x2c\xd0\xf8\x1e\xec\xda\xde\x0d\xc0\xd4\x4f\x10\x77\xfa\x31\xd9\x84\xd8\x07\x60\x85\x92\x74\x7a\xfa\x7a\x64\xbc\xe7\xaa\xe0\x59\xd6\x56\xb7\x44\x9f\xb2\x2f\xf3\xfb\xbb\x71\xd9\x43\x0e\x57\xe4\x03\xba\xbd\x5e\x1a\x5c\x83\xc7\xc1\x2d\x85\x27\x19\x80\x38\xfc\x32\xd1\x8d\xbb\x2f\x07\x63\xec\x56\xd6\x8e\x36\x64\x70\x85\xba\x63\xe8\x30\x65\x6c\xa3\x65\xed\xec\x86\x34\xba\x14\xb6\xbe\x07\x2c\xb7\x9c\xe8\xa4\x6b\x38\x50\x85\xa9\xb6\x6a\x8d\xae\xef\x1c\xc3\xd6\xba\xb5\xac\x4d\xb3\x22\x4e\x15\x53\x5f\xc7\x24\x17\xc4\x52\x93\x4b\x13\x5b\x87\x44\x31\xb5\x23\x3d\x82\x95\xe5\x65\x87\xb7\x2b\x6a\x71\xc6\x10\xeb\x43\x46\x6d\xb5\x24\x5e\x3a\x38\xb2\x40\x15\xac\x30\xbd\x3c\x1b\x8e\xce\xce\xcf\x47\x17\xa3\x0f\xc3\x58\xaf\x5d\x8c\xca\xc5\xa7\xaf\x6f\xcf\x7a\x17\xc3\xfe\x7f\x81\xad\x8f\x95\xad\xda\x2b\x48\x6a\x68\x3c\x4a\xa8\xf4\xe5\xe8\xea\x22\x3e\x3f\x88\xb5\x7b\x6e\xed\xd0\xea\xcd\xbd\x74\xe1\xf8\x05\x2a\xf3\x7b\x24\xef\x25\xb6\x87\xd5\x66\x45\x3f\x03\x00\x00\xff\xff\x5c\x6d\xc6\x40\xdd\x03\x00\x00")

func _10EkscltAl2ConfBytes() ([]byte, error) {
	return bindataRead(
		__10EkscltAl2Conf,
		"10-eksclt.al2.conf",
	)
}

func _10EkscltAl2Conf() (*asset, error) {
	bytes, err := _10EkscltAl2ConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "10-eksclt.al2.conf", size: 989, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bootstrapAl2Sh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x92\xd1\x6b\xdb\x30\x10\xc6\xdf\xef\xaf\xb8\x79\xa6\x24\x0c\x45\xeb\xe8\x06\x6d\xe6\x41\x59\x32\x08\x6c\x69\xa0\x7d\xd8\x08\x99\x51\xec\xcb\x2c\x2a\x4b\xc6\x3a\x77\x2d\xc6\xfb\xdb\x87\x13\xa7\x73\x46\x1f\xb2\xf5\xc9\xf6\xdd\xf7\x7d\x3a\xff\x4e\x2f\x5f\xc8\xb5\xb6\x72\xad\x7c\x86\x82\x00\x36\x95\x4d\x58\x3b\x8b\x3f\x88\xe3\x5c\xdd\xc7\x85\x4b\xfd\x60\x88\x35\x20\x7e\xb9\xfc\x1a\x2f\xae\x26\xd7\xf1\xa7\xd9\xe7\x69\x14\x48\xe2\x44\xd2\xad\x4f\xd8\xc8\xbd\x32\xce\x55\x31\xe2\x7b\x0e\x00\xf1\x67\xa6\x0d\x61\x49\x2a\x45\x6d\x3d\x2b\x9b\x50\xcc\x0f\x05\x61\x2b\x1c\x63\xea\x00\x10\x11\xf5\x06\x71\xb9\xc4\x20\xac\x0f\x54\x4d\x80\x51\xd4\x56\x4f\x9b\x00\x57\x2b\x3c\x39\xe9\x54\xad\xbb\x6d\xfe\xc2\xef\xcb\xd7\xe2\x7c\xf5\x2a\x6c\xdb\x63\xe4\x8c\xec\x36\x10\x91\x92\xcc\x61\xa7\x1c\x77\xb5\x92\xb8\x2a\x77\x82\x8d\xc6\xf1\xee\xec\xd4\x59\xc2\xf7\x6d\xea\xc1\xbf\x35\x01\x34\x00\xf3\xab\xc9\x34\x9e\x2d\xa2\x70\x90\x54\xa5\x41\x21\xbc\x36\x64\x19\x33\xe6\xe2\x42\xca\xd3\x77\xe7\xa3\x37\x6f\xcf\x46\xdd\x53\x1a\xc5\xe4\x59\xe6\xc4\x4a\xa4\x8a\x95\x34\x2e\x51\x46\xe8\xe2\xee\x6c\x08\xb3\xf9\xf5\xcd\xe5\xfc\xe3\x34\x9e\x4d\xfe\x3b\x6f\x8f\x47\xe8\xb4\x17\x78\xf3\x6d\x31\x7d\x7e\x64\x4b\x7c\x08\xe0\x5d\x55\x26\x84\xfd\xcd\xde\x56\x6b\x32\xc4\x23\xb2\x77\x00\x7b\x4a\xd1\x1f\x60\x17\x22\x1c\xf4\xef\x0a\x86\xf5\xc1\x6c\xcd\xb0\x01\xf0\xc4\x28\x1c\x5a\x57\x59\x4f\x0c\xb0\x5d\x50\xf0\x08\xb8\xee\xde\x9a\x00\x3f\x3c\x79\xf8\x16\xe5\x76\x84\x9d\xf3\x00\x67\xdd\xfb\x6a\x13\xfe\x31\x62\x07\xf0\xaf\xa1\x8f\x8e\x79\x82\xc8\x31\x66\xf0\x0f\x9e\x29\x4f\xd8\x60\xaa\x28\x77\x56\x94\x64\x9c\x4a\x7b\x75\xb2\x6a\x6d\x08\x3b\x6f\xaf\xe1\x59\x95\xfc\x58\xff\x1d\x00\x00\xff\xff\x76\x8b\x37\x29\xc1\x03\x00\x00")

func bootstrapAl2ShBytes() ([]byte, error) {
	return bindataRead(
		_bootstrapAl2Sh,
		"bootstrap.al2.sh",
	)
}

func bootstrapAl2Sh() (*asset, error) {
	bytes, err := bootstrapAl2ShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bootstrap.al2.sh", size: 961, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bootstrapUbuntuSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x95\x6d\x6f\xdb\x36\x10\xc7\xdf\xeb\x53\xdc\x5c\xa3\x4b\xb0\x52\x4a\xd2\xb4\x40\x93\x69\x98\x57\xbb\x83\xb1\x2c\x29\x6a\x17\xdd\x10\x64\xc6\x59\x3c\x59\x84\x29\x52\x20\x4f\x76\xd3\xc0\xfb\xec\x03\x25\xcb\xb1\x03\xec\xa1\x43\x5e\xc4\xe2\xfd\xf8\xbf\xe3\xf1\xee\xf8\xec\x9b\x64\xae\x4c\x32\x47\x5f\x80\xa0\x28\xca\x6b\x93\xb1\xb2\x06\x16\xc4\xb3\x12\x3f\xcf\x2a\x2b\xfd\xd1\x31\x3c\x44\x00\xbf\x0e\x7e\x9b\xbd\xbf\x19\x4e\x66\xef\xc6\x57\xa3\xb4\x97\x10\x67\x09\x2d\x7d\xc6\x3a\xe9\xc8\x59\x89\x55\xcc\x9f\xb9\x17\x01\xac\x0b\xa5\x09\x1c\xa1\x04\x65\x3c\xa3\xc9\x68\xc6\xf7\x15\x41\x00\x2f\x41\xda\x28\x02\x00\x50\x39\xc0\xed\x2d\xf4\xfa\x0f\x07\xd4\xa6\x07\x69\x1a\x56\x4f\x37\x3d\xb8\xbb\x83\xe7\xcf\xb7\x54\xd8\x1d\x8c\x7f\xc2\x1f\xb7\x27\xe2\xcd\xdd\x77\xfd\x60\xbe\x04\x2e\xc8\x34\x82\x00\x94\x15\x16\xb6\xe4\xe5\x76\xcd\x11\xd7\xae\x05\x72\x05\x97\xad\x6f\x69\x0d\xc1\xf7\x41\xf5\xe0\x6c\x9b\x5e\xb4\x89\xa2\xa8\x91\xe9\x5d\xdf\x0c\x47\xb3\xf1\xfb\xb4\x7f\x94\xd5\x4e\x83\x10\x5e\x69\x32\x0c\x05\x73\x75\x91\x24\xa7\xaf\xdf\xc4\x67\xaf\xce\xe3\xed\xff\x44\x23\x93\xe7\xa4\x24\x46\x21\x91\x31\xd1\x36\x43\x2d\x54\xb5\x3a\x3f\xee\xc1\x0f\xb0\x9f\xb5\x65\x3d\x27\x4d\x1c\x37\x48\x4c\x66\xb5\x75\x39\xbe\x9e\x4c\x07\xd7\x6f\x47\xb3\xf1\xf0\x7f\xbb\xed\x92\x29\x94\x0c\x7e\xbf\xd2\xf1\xf4\xf7\xf7\xa3\x9d\x6b\xff\xf5\x4e\xc3\x0d\xfe\x17\xb7\x91\x37\x58\x01\x6a\x85\x1e\xb6\x56\x41\x4b\x1f\x6f\x7f\x77\x6b\x4f\xb1\x8c\xf5\x0e\xcb\x58\x77\x6b\x2d\xe6\xd9\x56\xfb\x62\x91\xbf\xf7\x4c\x65\xe0\x1c\x79\x62\x91\xa3\xd2\x24\xa3\xe8\x28\x02\x78\x06\xd3\x9b\xe1\xcd\x45\xa8\x1e\x4f\xe0\x0b\x5b\x6b\x09\x73\x02\x6d\xed\x92\x24\x20\x03\xad\xc8\xdd\x03\xab\x92\x3a\x51\xf0\x8c\x8e\x3d\xd4\xd5\x8b\x46\x61\x5d\xa8\xac\x00\xe5\x61\x5d\x20\xc3\x9a\x40\x5a\x50\x06\x06\x57\x67\x70\xb4\xb3\xcd\xd1\x93\x04\x6b\xa0\xd2\xa8\x0c\xb4\x31\xc9\x56\x00\x8d\x84\x92\xd0\x30\xb0\x0d\xce\x2b\xeb\x18\xe7\x9a\xc2\x67\x69\x3d\x77\x34\x48\xe5\xd9\x59\x7f\xfc\x02\xe6\x35\x83\xe2\x6f\x7d\xb3\xdf\x58\x86\x4c\x13\x3a\x28\xec\x3a\x6c\xd2\x16\xe5\xf6\x48\xb9\xb3\xe5\x63\xe0\x21\x3f\x6b\xc5\x85\xad\x19\x0a\x5c\x29\xb3\x68\x04\xd8\x42\x56\x7b\xb6\xa5\xf2\x14\xf6\xb5\xa0\x62\x4f\x3a\x8f\x00\xbc\xad\x5d\x46\xff\x72\x95\xff\x88\xfd\x2d\x10\x6a\x27\x94\x4e\x5b\x0d\x8f\x33\x26\x7d\x6c\xc9\x0b\xd1\x3f\xda\x9f\x46\xd0\x7f\x38\xa8\xd3\xcd\xf1\x26\x68\x13\x83\xb0\x60\x6c\x6d\x3c\x71\x90\xca\x35\x2e\x7c\x7a\xd4\x34\x7a\x0f\xa5\x74\xe4\x7d\x7a\x12\x37\x7f\xbd\x76\xd5\x58\x49\x42\x55\x69\xff\x61\xdb\xe5\x9b\xad\x21\xd3\xb5\x67\x72\x42\x1a\x9f\xf6\x1f\xde\x5e\x7d\x9c\x4c\x47\x1f\x66\xc3\xeb\x49\x07\x94\xf8\x59\x84\x60\xf6\xe2\xdc\xec\x8b\x6a\x9c\x93\xf6\x9d\xf0\xd5\xe0\xa7\xd1\xd5\x64\xf3\x02\x75\x55\x60\xdc\x1e\x3d\x56\x76\xbf\x49\xd3\xbd\x53\x8d\x87\x9d\x16\xd6\x61\xac\xb1\xca\x30\x0c\x65\xc1\x76\x49\x46\xac\x69\x5e\x58\xbb\x4c\xd9\xd5\xb4\xc7\x59\xa7\xbe\xb4\x58\x69\x25\xa5\x9f\x5a\xaa\x03\xb4\xb6\x6b\x51\x39\xb5\x52\x9a\x16\x24\xf7\x37\x57\x56\x0a\x65\x72\x87\x22\xb3\x86\x51\x19\x72\x42\x95\xb8\xa0\xf4\xf5\xc9\xd9\xf9\xc9\xe9\xe9\xf9\xcb\xf3\x57\x67\xb1\x5c\xba\x98\x32\x17\xf7\x1f\x06\x9f\x26\xb3\xe1\xe8\xdd\xe0\xe3\xd5\x74\xf6\x61\xf4\xf3\xf8\xe6\x7a\x13\x63\x89\x5f\xac\xc1\xb5\x8f\x33\x5b\x86\xdb\x4d\x2a\xac\x3d\x09\x2c\xe5\xeb\xf3\x8b\x97\xf1\xe9\x2e\xb3\xb6\x96\xa2\x72\x76\xa5\x24\xb9\x14\xd7\xfe\x69\xca\x6d\x89\xca\xa4\xdb\xcf\xb6\xc0\x3a\xc4\x28\x31\x57\x46\x48\xe5\xd2\xc4\x56\x9c\x64\x46\x85\xe7\x6b\xcf\x9c\x59\x93\xb7\xf6\x50\x64\xc1\x6e\x88\x63\xd9\x11\xbb\xf3\xb9\xda\x84\x96\x4e\xa5\xcd\x96\xe4\xba\x9b\x23\x5e\x5b\xb7\x14\x95\xae\x17\x21\x04\xa3\xba\x7d\x0b\x67\xeb\x4a\x48\xa7\x56\xe4\xd2\xf6\x2b\xef\x02\x77\xb4\x50\x4d\xe4\xe1\xe2\xf7\xf3\xba\x33\x84\x8e\x13\xc1\x31\xef\x2a\x62\x3a\x18\x5f\x4f\x77\x25\xd3\xcc\x2f\x6b\x72\xb5\x48\x9f\x76\x4f\xbb\x1c\xdf\x63\xd9\x65\x21\x27\xe4\xda\x91\x58\x84\xe9\x9b\x7e\xb0\x8c\x4c\xbf\xb4\x7d\x36\x21\xb7\x22\xf7\x96\x1c\xab\x3c\xd4\xcc\x41\x38\x68\xac\xb9\x2f\x6d\xed\x45\xa8\x96\x34\x47\xed\x69\x97\x7b\x45\x86\x45\x86\x22\x57\x9a\x0e\x62\xc8\x30\xce\x5c\xf3\x9e\x1f\x87\xa6\x6a\x27\xec\xe3\x64\x0e\x03\x36\xbc\x9f\x4d\xb3\xdd\xfe\x78\xb7\xe9\x45\xc7\x51\x37\x87\xd1\x1d\x70\xd1\x5f\x01\x00\x00\xff\xff\x67\x5a\x45\xad\x6d\x08\x00\x00")

func bootstrapUbuntuShBytes() ([]byte, error) {
	return bindataRead(
		_bootstrapUbuntuSh,
		"bootstrap.ubuntu.sh",
	)
}

func bootstrapUbuntuSh() (*asset, error) {
	bytes, err := bootstrapUbuntuShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bootstrap.ubuntu.sh", size: 2157, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _kubeletYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x91\x4f\x4f\xc3\x30\x0c\xc5\xef\xf9\x14\xfe\x04\x6d\x07\x9a\x04\xb9\x8d\x4d\x70\x60\x27\x36\xe0\xec\xa6\xee\x16\x35\x8d\x27\xc7\x19\x7f\x3e\x3d\x5a\x5a\x90\x26\xa1\x9c\x9e\xde\xb3\xdf\x4f\xce\xe0\x63\x67\xe1\x39\xb7\x14\x48\xd7\x1c\x7b\x7f\xc8\x82\xea\x39\x1a\x3c\xf9\x37\x92\xe4\x39\x5a\x18\xa6\x40\xe5\x4a\xa2\x1a\xee\x52\xe5\xb9\x3e\x2f\x5a\x52\x5c\x18\x83\x5d\x27\x94\x92\x85\xa6\x2a\xcf\xb8\x90\x93\x92\x6c\x78\x44\x1f\x2d\xcc\xb2\x0a\xec\x30\x18\x83\x59\x8f\x14\xd5\xbb\x52\x64\x0d\x00\x46\x8e\x5f\x23\xe7\x74\x11\x00\x14\xb1\x0d\xd4\x59\xe8\x31\x24\x32\x00\x1f\xd4\x1e\x99\x87\xc9\x75\xe8\x8e\xb4\xdf\x6f\x2d\xdc\x8c\x4d\xba\x1e\x50\xc9\x97\xfc\xe7\xb2\xb9\x9f\xc3\xc1\x53\xd4\xf5\xea\xd1\x07\xb2\x50\x93\xba\x9a\x86\xe4\x34\xd4\x0e\x2b\x27\x3a\xd1\xb0\xf8\xef\x3f\x98\x91\x3b\xb2\xf0\x3e\x55\xfe\x5b\xbe\x9a\x47\xa8\x2b\x18\xcb\x5f\x8c\x62\xbe\x46\xbc\xb6\x6f\x9b\x64\x4c\x22\x39\x93\xec\xb7\xbb\x07\x66\x4d\x2a\x78\x9a\x61\x8d\x3b\x08\xe7\xd3\x46\xfc\x99\xc4\xc2\xa4\xfa\x64\x4c\x4f\xa8\x59\xe8\x09\x95\xca\x59\x5e\x58\x51\x69\xfe\xaa\x5d\x59\xb7\x26\x51\xdf\x5f\xee\x48\xf3\xb6\x9f\x00\x00\x00\xff\xff\x1f\x2f\xa9\x0f\xd0\x01\x00\x00")

func kubeletYamlBytes() ([]byte, error) {
	return bindataRead(
		_kubeletYaml,
		"kubelet.yaml",
	)
}

func kubeletYaml() (*asset, error) {
	bytes, err := kubeletYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kubelet.yaml", size: 464, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"10-eksclt.al2.conf": _10EkscltAl2Conf,
	"bootstrap.al2.sh": bootstrapAl2Sh,
	"bootstrap.ubuntu.sh": bootstrapUbuntuSh,
	"kubelet.yaml": kubeletYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"10-eksclt.al2.conf": &bintree{_10EkscltAl2Conf, map[string]*bintree{}},
	"bootstrap.al2.sh": &bintree{bootstrapAl2Sh, map[string]*bintree{}},
	"bootstrap.ubuntu.sh": &bintree{bootstrapUbuntuSh, map[string]*bintree{}},
	"kubelet.yaml": &bintree{kubeletYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

