// Code generated by go-bindata.
// sources:
// assets/10-eksclt.al2.conf
// assets/bootstrap.al2.sh
// assets/bootstrap.ubuntu.sh
// assets/cut_script.sh
// assets/kubelet.yaml
// assets/max_pods_map.txt
// DO NOT EDIT!

package nodebootstrap

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __10EkscltAl2Conf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\x4f\x6b\xdb\x4e\x10\xbd\xeb\x53\x2c\x24\x87\xdf\x0f\xbc\x52\xe2\xb8\x39\x04\x74\x50\x63\x25\x18\x54\x27\x44\x0e\x2d\xb4\xc5\x8c\x77\xc7\xce\xe0\xd5\xac\xd8\x5d\xd9\x49\x83\xbf\x7b\x91\x65\xb5\x2e\x09\xa5\x37\xed\xbc\x99\xf7\xde\xfc\xd1\x89\xc0\xb5\x57\xc1\x48\x5f\xa3\xa2\x25\x29\xe1\x5f\x7c\xc0\x4a\x0b\xed\x6c\x2d\x89\x45\xc3\x14\xc4\xd2\x3a\xb1\x6e\x16\x68\x30\x0c\xf6\x8f\xac\x82\x1f\x96\x45\x41\xdc\x3c\x8b\xa1\xf8\x2f\x2b\x86\xff\x47\xd1\xd7\x12\xdd\x86\x14\x7e\x8f\x4e\x44\x61\x15\x18\x51\x61\x00\x0d\x01\x44\x0d\x0e\x2a\x0c\xe8\xfc\x95\x78\xc8\x6f\x27\x77\xd3\x81\xc8\x3e\x97\xf3\x71\x7e\x93\x3d\x16\xb3\x79\x17\x8b\x72\xde\x90\xb3\x5c\x21\x87\x1b\x32\x98\x26\x18\x54\xd2\x59\x4c\x7a\xae\x18\x79\x13\x9d\x88\x5b\x63\x17\x60\x04\xb0\x16\x3e\x40\x20\xf5\x87\xc6\x75\xf1\x58\xce\xf2\x87\xf9\x78\x5a\x0e\xc4\xf4\x6e\x9c\xcf\x8b\xec\x63\x5e\xf4\x8f\x59\x36\x99\xce\xca\xbf\xca\x1d\xfa\x3d\xa8\x75\xed\xb0\x65\xf9\x8e\xd8\x9e\x72\x72\x3f\x10\x93\x69\x39\xcb\xa6\xd7\xf9\x7c\x32\xfe\x27\x6e\xd3\xb2\xee\x15\xa2\xfc\x19\x55\x19\xc0\x85\xf4\xe8\x33\x69\xbc\x4b\x16\xc4\x7d\x81\xf8\x16\x09\x21\x25\x5b\x8d\x92\xea\xf4\xf4\xf5\xa0\xbc\x3b\x06\x0c\x2c\xd0\xf8\x1e\xec\xda\xde\x0d\xc0\xd4\x4f\x10\x77\xfa\x31\xd9\x84\xd8\x07\x60\x85\x92\x74\x7a\xfa\x7a\x64\xbc\xe7\xaa\xe0\x59\xd6\x56\xb7\x44\x9f\xb2\x2f\xf3\xfb\xbb\x71\xd9\x43\x0e\x57\xe4\x03\xba\xbd\x5e\x1a\x5c\x83\xc7\xc1\x2d\x85\x27\x19\x80\x38\xfc\x32\xd1\x8d\xbb\x2f\x07\x63\xec\x56\xd6\x8e\x36\x64\x70\x85\xba\x63\xe8\x30\x65\x6c\xa3\x65\xed\xec\x86\x34\xba\x14\xb6\xbe\x07\x2c\xb7\x9c\xe8\xa4\x6b\x38\x50\x85\xa9\xb6\x6a\x8d\xae\xef\x1c\xc3\xd6\xba\xb5\xac\x4d\xb3\x22\x4e\x15\x53\x5f\xc7\x24\x17\xc4\x52\x93\x4b\x13\x5b\x87\x44\x31\xb5\x23\x3d\x82\x95\xe5\x65\x87\xb7\x2b\x6a\x71\xc6\x10\xeb\x43\x46\x6d\xb5\x24\x5e\x3a\x38\xb2\x40\x15\xac\x30\xbd\x3c\x1b\x8e\xce\xce\xcf\x47\x17\xa3\x0f\xc3\x58\xaf\x5d\x8c\xca\xc5\xa7\xaf\x6f\xcf\x7a\x17\xc3\xfe\x7f\x81\xad\x8f\x95\xad\xda\x2b\x48\x6a\x68\x3c\x4a\xa8\xf4\xe5\xe8\xea\x22\x3e\x3f\x88\xb5\x7b\x6e\xed\xd0\xea\xcd\xbd\x74\xe1\xf8\x05\x2a\xf3\x7b\x24\xef\x25\xb6\x87\xd5\x66\x45\x3f\x03\x00\x00\xff\xff\x5c\x6d\xc6\x40\xdd\x03\x00\x00")

func _10EkscltAl2ConfBytes() ([]byte, error) {
	return bindataRead(
		__10EkscltAl2Conf,
		"10-eksclt.al2.conf",
	)
}

func _10EkscltAl2Conf() (*asset, error) {
	bytes, err := _10EkscltAl2ConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "10-eksclt.al2.conf", size: 989, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bootstrapAl2Sh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x92\xc1\x6e\xd3\x40\x10\x86\xef\xf3\x14\x3f\x26\x87\x44\x68\xb3\x80\x0a\x52\x1b\x05\xa9\x22\x41\x8a\x04\x69\xa4\xf6\x00\x8a\x82\xb5\xb1\x27\x8d\xd5\xcd\xae\xe5\x1d\x97\x56\xc1\x3c\x3b\x72\xe2\x04\x57\xf4\x50\xe8\xc9\xf6\xef\x99\x6f\xb5\xdf\xcc\xcb\x17\x7a\x99\x39\xbd\x34\x61\x0d\xc5\x44\xab\xd2\x25\x92\x79\x87\x6b\x96\x78\x63\xee\xe2\xdc\xa7\xa1\xdb\xc3\x96\x80\x2f\xe7\x5f\xe3\xd9\xc5\xe8\x32\xfe\x34\xf9\x3c\x1e\x46\x9a\x25\xd1\x7c\x13\x12\xb1\xfa\x50\x19\x6f\x4c\xde\x97\x3b\x89\x08\xb8\x2e\x38\x47\xd4\xd9\x4e\xa6\x97\x57\xe7\xd3\x8f\xe3\xf8\xea\xdb\x6c\x5c\x45\x75\xf4\x80\x54\x45\xf8\x89\x1f\xeb\xcc\x32\x0a\x36\x29\x32\x17\xc4\xb8\x84\x63\xb9\xcf\x19\x35\x75\x80\xd4\x13\x01\x40\xb6\x02\xe6\xf3\x1a\x51\xe7\x55\x84\xe1\x2f\x7c\x9f\xbf\x56\xa7\x8b\x57\x1d\x2c\x16\x18\x40\xd6\xec\x76\xa5\x00\x27\x6b\x8f\xa6\x72\xd0\x64\x05\x4b\x59\xec\x0b\x56\x19\x06\x7b\x6a\xea\x1d\x53\x45\x34\xbd\x18\x8d\xe3\xc9\x6c\xd8\xe9\x26\x65\x61\xa1\x54\xc8\x2c\x3b\xc1\x5a\x24\x3f\xd3\xfa\xcd\xfb\xd3\xfe\xdb\x77\x27\xfd\xe6\xa9\xad\x11\x0e\xa2\x37\x2c\x46\xa5\x46\x8c\xb6\x3e\x31\x56\x65\xf9\xed\x49\x8f\x8e\xb7\x9e\x8c\xfe\x9b\x77\x30\xa1\xb2\xb4\x05\xac\x35\x3e\x1f\x59\xcb\xed\x11\x05\x5f\x16\x09\xa3\x3d\xcb\x9b\x72\xc9\x96\xa5\xcf\xee\x96\xe8\x30\xa9\xe1\x9f\xa1\x9d\xa9\x4e\xb7\xbd\x1d\xbd\x8a\x28\xb0\x40\x79\x38\x5f\xba\xc0\x42\xb4\x53\x1f\x1d\x7d\x6e\x9b\xb7\x2a\xc2\x87\x47\xcf\xda\x99\xdb\x9d\xb8\xef\x7c\x60\x6f\xdb\xfa\xaa\x09\xff\x88\xd8\xfb\xfa\x6b\x0d\x9f\x88\x79\x44\xc0\x53\x9a\x29\xdc\x07\xe1\x4d\x22\x16\xa9\xe1\x8d\x77\xaa\x60\xeb\x4d\xda\xca\xd9\x99\xa5\x65\x34\xbd\xad\x1f\x41\x4c\x21\xc7\xfc\x77\x00\x00\x00\xff\xff\x5e\xca\x96\x59\xa2\x03\x00\x00")

func bootstrapAl2ShBytes() ([]byte, error) {
	return bindataRead(
		_bootstrapAl2Sh,
		"bootstrap.al2.sh",
	)
}

func bootstrapAl2Sh() (*asset, error) {
	bytes, err := bootstrapAl2ShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bootstrap.al2.sh", size: 930, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bootstrapUbuntuSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x55\x6d\x6f\xdb\x36\x10\xfe\xae\x5f\x71\x73\x0d\x2c\xc1\x4a\x29\x49\xd3\x02\x4d\xa0\x61\x5e\xed\x0e\xc6\xb2\xa4\xa8\x5d\x74\x43\x90\x19\x67\xf2\x64\x11\xa6\x48\x81\x3c\xd9\x4d\x33\xef\xb7\x0f\xb4\x2c\xc7\x29\xb0\x97\x0e\xf9\x10\xeb\xee\xb9\xe7\x4e\xf7\xf2\xe8\xd9\x37\xd9\x5c\xdb\x6c\x8e\xa1\x04\x41\x49\x52\x34\x56\xb2\x76\x16\x16\xc4\xb3\x0a\x3f\xcd\x6a\xa7\xc2\xd1\x31\x3c\x24\x00\xbf\x0c\x7e\x9d\xbd\xbb\x19\x4e\x66\x6f\xc7\x57\xa3\xbc\x97\x11\xcb\x8c\x96\x41\xb2\xc9\x3a\xe4\xac\xc2\x3a\xe5\x4f\xdc\x4b\x00\x16\x9e\x6a\xe8\xf5\x1f\xc6\xd7\x93\xe9\xe0\xfa\xcd\x68\x36\xfd\xed\xdd\x68\xd3\x8b\xa6\x27\x4c\x9b\x1e\xfc\x01\xeb\x52\x1b\x02\x4f\xa8\x40\xdb\xc0\x68\x25\xcd\xf8\xbe\x26\x88\xac\x97\xa0\x5c\x92\x00\x00\xe8\x02\xe0\xf6\x36\x52\x44\xfb\xa6\x07\xf9\x9f\xf0\xfb\xed\x89\x78\x7d\xf7\x5d\x1f\xee\xee\xe0\x12\xb8\x24\xbb\x85\x02\x90\x2c\x1d\xec\x90\x97\x3b\x9b\x27\x6e\x7c\x0b\x28\x34\x5c\xb6\xac\xca\x59\x4a\x36\x49\x92\x6c\x23\x7a\xd7\x37\xc3\xd1\x6c\xfc\x2e\xef\x1f\xc9\xc6\x1b\x10\x22\x68\x43\x96\xa1\x64\xae\x2f\xb2\xec\xf4\xd5\xeb\xf4\xec\xe5\x79\xba\xfb\x9f\x19\x64\x0a\x9c\x55\xc4\x28\x14\x32\x66\xc6\x49\x34\x42\xd7\xab\xf3\xe3\x1e\x7c\x0f\x87\x7d\x5a\x36\x73\x32\xc4\xe9\x16\x92\x92\x5d\xed\x52\xee\x7b\x34\x1e\xfe\xef\xb4\x5d\xdf\x84\x56\x31\xef\x57\x26\x8e\xc3\xd9\xa7\x0e\x5f\x9f\x34\x0e\xeb\xbf\xa4\x4d\x82\xc5\x1a\xd0\x68\x0c\xb0\xf3\x0a\x5a\x86\x74\xf7\xbb\xb3\x7d\x09\x93\x6c\xf6\x30\xc9\xa6\xb3\xb5\xb0\xc0\xae\x3e\x24\x4b\xc2\x7d\x60\xaa\x22\xce\x53\x20\x16\x05\x6a\x43\x2a\x49\x92\xa3\x04\xe0\x19\x4c\x6f\x86\x37\x17\x71\x53\x02\x41\x28\x5d\x63\x14\xcc\x09\x8c\x73\x4b\x52\x80\x0c\xb4\x22\x7f\x0f\xac\x2b\xea\x58\x21\x30\x7a\x0e\xd0\xd4\xcf\xb7\x0c\xeb\x52\xcb\x12\x74\x80\x75\x89\x0c\x6b\x02\xe5\x40\x5b\x18\x5c\x9d\xc1\xd1\xde\x37\xc7\x40\x0a\x9c\x85\xda\xa0\xb6\xd0\x16\xa5\x5a\x02\xb4\x0a\x2a\x42\xcb\xc0\x2e\x26\xaf\x9d\x67\x9c\x1b\x8a\x8f\x95\x0b\xdc\xa1\x41\xe9\xc0\xde\x85\xe3\xe7\x30\x6f\x18\x34\x7f\x1b\xb6\xf1\xd6\x31\x48\x43\xe8\xa1\x74\xeb\x18\x64\x1c\xaa\xdd\x2b\x15\xde\x55\x8f\x85\xc7\x06\xad\x35\x97\xae\x61\x28\x71\xa5\xed\x62\x4b\xc0\x0e\x64\x13\xd8\x55\x3a\x50\x8c\x6b\x81\x9a\x03\x99\x22\x01\x08\xae\xf1\x92\xfe\x65\x96\xff\x08\xfb\x5b\x40\x5c\x9e\xb8\x3b\xed\x3a\x3c\xca\x4a\xfe\xa8\x0b\x17\xa2\x7f\x74\x28\x40\xc7\x9b\x48\x45\x0c\xc2\x81\x75\x8d\x0d\xc4\x31\xb2\x30\xb8\x08\xf9\xd1\xf6\x86\x7b\xa8\x94\xa7\x10\xf2\x93\x74\xfb\xd7\x6b\xad\xd6\x29\x12\xba\xce\xfb\x0f\xbb\xab\xde\xec\x1c\xd2\x34\x81\xc9\x0b\x65\x43\xde\x7f\x78\x73\xf5\x61\x32\x1d\xbd\x9f\x0d\xaf\x27\x1d\xa0\xc2\x4f\x22\xe6\x3e\x28\x6b\x73\x48\x6a\x70\x4e\x26\x74\xc4\x57\x83\x1f\x47\x57\x93\xcd\x73\x34\x75\x89\x69\xfb\xa6\xa9\x76\x87\x47\x99\x1f\x48\xe1\x78\xd8\x71\x61\x13\x15\x8b\xb5\xc4\x28\xbb\x82\xdd\x92\xac\x58\xd3\xbc\x74\x6e\x99\xb3\x6f\xe8\x00\xe7\xbc\xfe\xdc\xc2\x2a\xa7\x28\xff\xd8\xa2\x3a\x80\x31\x6e\x2d\x6a\xaf\x57\xda\xd0\x82\xd4\x61\x70\xed\x94\xd0\xb6\xf0\x28\xa4\xb3\x8c\xda\x92\x17\xba\xc2\x05\xe5\xaf\x4e\xce\xce\x4f\x4e\x4f\xcf\x5f\x9c\xbf\x3c\x4b\xd5\xd2\xa7\x24\x7d\xda\x7f\x18\x7c\x9c\xcc\x86\xa3\xb7\x83\x0f\x57\xd3\xd9\xfb\xd1\x4f\xe3\x9b\xeb\x4d\x8a\x15\x7e\x76\x16\xd7\x21\x95\xae\x8a\xc3\xcc\x6a\x6c\x02\x09\xac\xd4\xab\xf3\x8b\x17\xe9\xe9\xbe\xb3\xae\x51\xa2\xf6\x6e\xa5\x15\xf9\x1c\xd7\xe1\xcb\x96\xbb\x0a\xb5\xcd\x77\x8f\xed\x3e\x75\x10\xab\xc5\x5c\x5b\xa1\xb4\xcf\x33\x57\x73\x26\xad\x8e\x1f\xa8\x03\xb7\x74\xb6\x68\xfd\x71\xa7\xa2\xdf\x12\xa7\xaa\x43\xec\xdf\xcf\x37\x36\x5e\x70\xae\x9c\x5c\x92\xef\x26\x47\xbc\x76\x7e\x29\x6a\xd3\x2c\x62\x09\x56\x77\x71\x0b\xef\x9a\x5a\x28\xaf\x57\xe4\xf3\xf6\xa9\xe8\x0a\xf7\xb4\xd0\xdb\xca\xe3\xe0\x0f\xfb\xba\x77\xc4\x03\x13\x31\x31\xef\x37\x62\x3a\x18\x5f\x4f\xf7\x2b\xb3\xd5\x2b\x67\x0b\xbd\xc8\xbf\x3c\x96\xd6\x9c\xde\x63\xd5\x75\xa1\x20\xe4\xc6\x93\x58\x44\xb5\xcd\xdf\x3b\x46\xa6\x9f\xdb\xb3\x9a\x90\x5f\x91\x7f\x43\x9e\x75\x11\x77\xe6\x49\x39\x68\x9d\xbd\xaf\x5c\x13\x44\xdc\x96\xbc\x40\x13\x68\xdf\x7b\x4d\x96\x85\x44\x51\x68\x43\x4f\x6a\x90\x98\x4a\xbf\xfd\x62\x1f\xc7\xa3\x6a\x15\xf5\x51\x89\xa3\xa0\xc6\x0f\xee\xf6\xd8\x6e\x7f\xb8\xdb\xf4\x92\xe3\xa4\xd3\x5d\xf4\x4f\x70\xc9\x5f\x01\x00\x00\xff\xff\xed\x0f\x54\x42\x4f\x08\x00\x00")

func bootstrapUbuntuShBytes() ([]byte, error) {
	return bindataRead(
		_bootstrapUbuntuSh,
		"bootstrap.ubuntu.sh",
	)
}

func bootstrapUbuntuSh() (*asset, error) {
	bytes, err := bootstrapUbuntuShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bootstrap.ubuntu.sh", size: 2127, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cut_scriptSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8e\x4d\x4b\xf4\x30\x14\x85\xf7\xe7\x57\x9c\xb7\x6f\x61\x14\x29\x11\x77\x52\xba\x10\xdc\x8a\x82\x1b\xa1\xd4\x4e\xa6\xb9\x9d\x84\xda\xa4\xa4\xa9\x1f\xf8\xf1\xdb\xa5\x23\x03\xee\x5c\xde\xfb\xf0\x3c\x9c\xff\xff\xd4\x32\x47\xb5\x73\x5e\x89\x7f\xe6\x4e\xcf\x16\xa3\x7e\x6d\xa7\x60\xe6\x2a\xcb\x4a\x00\xb8\xb9\x7a\x68\xef\x6e\xaf\xef\xab\xed\x5e\x52\x7b\xa4\x5b\x00\xd2\xd9\xc0\xfc\xc8\x81\x7d\x94\x89\xc9\x46\x11\x2a\x1b\x46\x51\xa3\x8e\xc9\x79\xad\x86\x61\x18\xf8\xc1\x6e\x49\x2c\x7a\x5e\xb0\x30\xdc\x70\x83\x7e\xf1\x5d\x72\xc1\xf3\x77\xf8\xe4\x94\xef\x7f\x96\x5e\xac\x7b\x12\x46\xd1\x86\xe9\x6d\x12\xae\x62\x49\x13\x00\xd2\xf5\x64\x5d\x33\xcb\xd7\x67\xc6\xea\x8b\x8f\xf5\x79\x71\xd9\x9c\xe5\x6c\x1a\x96\x4c\x56\x3c\x48\xf2\x67\xfe\x41\x3d\xdc\x51\xd2\x12\x57\xd4\x3b\x96\x30\xc1\x0b\x3e\x01\x7c\x07\x00\x00\xff\xff\x81\x91\x6a\x6b\x24\x01\x00\x00")

func cut_scriptShBytes() ([]byte, error) {
	return bindataRead(
		_cut_scriptSh,
		"cut_script.sh",
	)
}

func cut_scriptSh() (*asset, error) {
	bytes, err := cut_scriptShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cut_script.sh", size: 292, mode: os.FileMode(493), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _kubeletYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x91\x4f\x4f\xc3\x30\x0c\xc5\xef\xf9\x14\xfe\x04\x6d\x07\x9a\x04\xb9\x8d\x4d\x70\x60\x27\x36\xe0\xec\xa6\xee\x16\x35\x8d\x27\xc7\x19\x7f\x3e\x3d\x5a\x5a\x90\x26\xa1\x9c\x9e\xde\xb3\xdf\x4f\xce\xe0\x63\x67\xe1\x39\xb7\x14\x48\xd7\x1c\x7b\x7f\xc8\x82\xea\x39\x1a\x3c\xf9\x37\x92\xe4\x39\x5a\x18\xa6\x40\xe5\x4a\xa2\x1a\xee\x52\xe5\xb9\x3e\x2f\x5a\x52\x5c\x18\x83\x5d\x27\x94\x92\x85\xa6\x2a\xcf\xb8\x90\x93\x92\x6c\x78\x44\x1f\x2d\xcc\xb2\x0a\xec\x30\x18\x83\x59\x8f\x14\xd5\xbb\x52\x64\x0d\x00\x46\x8e\x5f\x23\xe7\x74\x11\x00\x14\xb1\x0d\xd4\x59\xe8\x31\x24\x32\x00\x1f\xd4\x1e\x99\x87\xc9\x75\xe8\x8e\xb4\xdf\x6f\x2d\xdc\x8c\x4d\xba\x1e\x50\xc9\x97\xfc\xe7\xb2\xb9\x9f\xc3\xc1\x53\xd4\xf5\xea\xd1\x07\xb2\x50\x93\xba\x9a\x86\xe4\x34\xd4\x0e\x2b\x27\x3a\xd1\xb0\xf8\xef\x3f\x98\x91\x3b\xb2\xf0\x3e\x55\xfe\x5b\xbe\x9a\x47\xa8\x2b\x18\xcb\x5f\x8c\x62\xbe\x46\xbc\xb6\x6f\x9b\x64\x4c\x22\x39\x93\xec\xb7\xbb\x07\x66\x4d\x2a\x78\x9a\x61\x8d\x3b\x08\xe7\xd3\x46\xfc\x99\xc4\xc2\xa4\xfa\x64\x4c\x4f\xa8\x59\xe8\x09\x95\xca\x59\x5e\x58\x51\x69\xfe\xaa\x5d\x59\xb7\x26\x51\xdf\x5f\xee\x48\xf3\xb6\x9f\x00\x00\x00\xff\xff\x1f\x2f\xa9\x0f\xd0\x01\x00\x00")

func kubeletYamlBytes() ([]byte, error) {
	return bindataRead(
		_kubeletYaml,
		"kubelet.yaml",
	)
}

func kubeletYaml() (*asset, error) {
	bytes, err := kubeletYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kubelet.yaml", size: 464, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _max_pods_mapTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x55\x51\xae\xe2\x30\x0c\xfc\xef\x29\x7a\x82\xe8\xd9\x49\xa0\x1c\x27\x4a\xd8\x52\x89\xb0\x28\x74\x25\xb4\xa7\x5f\x99\x6d\x1b\x8f\xf9\xc3\xd4\x4e\xec\xf1\xcc\xa4\xc6\xe4\xc2\xfb\x9e\xda\x7c\x1d\xd9\x87\xe1\xc9\x6e\xc2\x90\x4e\x2a\xce\xe4\xb6\x28\x4e\xc3\xec\x5f\x2a\x5a\xbc\xab\xd7\x35\xdd\xc7\xb3\x3f\x0f\xd5\xbb\xad\xe8\x32\xd4\xa8\xb2\x5a\xec\x1f\x72\x50\x1f\xa4\x11\xde\x3b\x91\x23\xd6\xfd\x08\x1f\xe5\x77\xcf\x7c\xd3\x75\x8f\xf8\x32\xac\xec\x78\x8b\x42\xf8\x7c\xf3\xac\x1b\xce\x38\x50\x61\x75\xd2\x2f\x82\xd9\x6b\x2c\xa6\x05\x76\xaf\x9a\xee\xf7\x91\x48\x72\xb9\x57\xde\x20\x6a\x52\xd8\xc3\x4c\xae\x5e\xcb\xf2\xa7\x8e\xc4\x43\x65\x3b\xa4\xae\x4b\x4e\x0f\x72\xcc\x9b\x15\x7c\x8b\xd7\x25\x8b\xef\x0b\x09\x91\x05\x99\x47\x7a\xfc\x1e\xc3\xb0\xe8\x8b\x1a\x14\xad\x10\xe5\xe8\x2e\x6a\xea\xf5\xa8\xdb\xf0\x9b\x60\x5b\x1a\x20\x99\x33\x60\xe9\x3e\xe8\x79\x98\x3d\x7c\x5b\x30\xac\xa4\x08\xa1\x49\x54\x03\xe4\xe5\x60\x01\x22\xbd\xce\xbf\x54\x9c\x37\xf1\x91\x20\x2b\x7b\x13\x12\x76\x36\x78\xdd\x5e\x04\x7c\xa8\x66\xa4\x86\x64\x2d\x3a\x0a\x8a\xba\x11\x11\x2d\x00\x69\xd5\x7b\x95\x1b\x8e\xa0\x21\x2a\x4d\xf3\x7a\xf5\x0a\xcd\x1c\x40\x27\x00\x91\x3e\xb0\x30\xc2\x1c\x8c\x5e\x03\x4c\x9b\x95\xfa\x66\x14\x86\x54\xfe\xc0\x0c\x5f\x72\x3c\xb4\x90\x01\x97\x99\x0d\x41\x27\xc4\x13\x16\xb8\xf2\xce\xd7\xec\x6d\x6b\xa8\x13\x64\x81\xba\xe1\xe9\xad\xf6\xe0\x86\x84\xa2\xce\x1a\xe2\x8c\x42\x68\xc8\x85\x45\xa7\x16\x98\xaa\x46\xd3\x01\xa0\xdc\xf4\x46\x12\x59\x6a\xd0\xa4\x70\xac\xda\x1c\x9a\x35\xbd\x66\x2d\xe8\x4d\xc6\xcf\x0c\x5f\x6f\x64\x65\xf6\x7f\x4b\x1f\x61\x6d\xff\xff\x08\x75\x55\x4f\x49\x69\x31\x1b\xd5\xb2\xd9\x1e\xbe\x0e\x22\xb7\x13\x62\xbd\x0d\xf3\x01\x6c\x32\xa9\x5d\x03\x70\xff\x93\x51\x55\x20\xd0\x06\xab\x5f\xc9\xd5\x25\x37\xe1\x8b\xc8\x63\xfb\x99\xa3\xf1\x6d\xe3\x12\x15\xfd\xb8\x05\x7c\x80\xd0\x0b\x61\x3b\x37\xc2\x6e\x6a\x67\x01\xd1\x67\xf1\x13\xca\x57\x39\x42\x41\xc2\x18\x5a\x36\xa3\x27\xc1\x07\xd3\xc1\xbd\x2d\x94\xac\x9f\x5d\x64\xad\x71\x00\x23\xb8\xea\x61\x82\x86\x86\x20\x0e\xbe\x81\x9a\x08\x5f\xc6\xce\xf0\xc0\x22\x8d\xbe\x4c\xaf\x9f\x37\xad\x99\xa7\x2f\x0f\xc3\x67\xb4\x2e\x79\x5e\xf0\x15\x05\x0b\xfa\xf2\x32\x10\xa0\x72\xd4\xaf\x43\x41\x8e\x0b\x48\x57\x3e\x87\x1e\xfe\x0b\x00\x00\xff\xff\x90\xec\xec\xaa\xf1\x08\x00\x00")

func max_pods_mapTxtBytes() ([]byte, error) {
	return bindataRead(
		_max_pods_mapTxt,
		"max_pods_map.txt",
	)
}

func max_pods_mapTxt() (*asset, error) {
	bytes, err := max_pods_mapTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "max_pods_map.txt", size: 2289, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"10-eksclt.al2.conf": _10EkscltAl2Conf,
	"bootstrap.al2.sh": bootstrapAl2Sh,
	"bootstrap.ubuntu.sh": bootstrapUbuntuSh,
	"cut_script.sh": cut_scriptSh,
	"kubelet.yaml": kubeletYaml,
	"max_pods_map.txt": max_pods_mapTxt,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"10-eksclt.al2.conf": &bintree{_10EkscltAl2Conf, map[string]*bintree{}},
	"bootstrap.al2.sh": &bintree{bootstrapAl2Sh, map[string]*bintree{}},
	"bootstrap.ubuntu.sh": &bintree{bootstrapUbuntuSh, map[string]*bintree{}},
	"cut_script.sh": &bintree{cut_scriptSh, map[string]*bintree{}},
	"kubelet.yaml": &bintree{kubeletYaml, map[string]*bintree{}},
	"max_pods_map.txt": &bintree{max_pods_mapTxt, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

