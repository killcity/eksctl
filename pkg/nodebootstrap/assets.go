// Code generated by go-bindata.
// sources:
// assets/10-eksclt.al2.conf
// assets/bootstrap.al2.sh
// assets/bootstrap.ubuntu.sh
// assets/cut_script.sh
// assets/kubelet.yaml
// assets/max_pods_map.txt
// DO NOT EDIT!

package nodebootstrap

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __10EkscltAl2Conf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\x4f\x6b\xdb\x4e\x10\xbd\xeb\x53\x2c\x24\x87\xdf\x0f\xbc\x52\xe2\xb8\x39\x04\x74\x50\x63\x25\x18\x54\x27\x44\x0e\x2d\xb4\xc5\x8c\x77\xc7\xce\xe0\xd5\xac\xd8\x5d\xd9\x49\x83\xbf\x7b\x91\x65\xb5\x2e\x09\xa5\x37\xed\xbc\x99\xf7\xde\xfc\xd1\x89\xc0\xb5\x57\xc1\x48\x5f\xa3\xa2\x25\x29\xe1\x5f\x7c\xc0\x4a\x0b\xed\x6c\x2d\x89\x45\xc3\x14\xc4\xd2\x3a\xb1\x6e\x16\x68\x30\x0c\xf6\x8f\xac\x82\x1f\x96\x45\x41\xdc\x3c\x8b\xa1\xf8\x2f\x2b\x86\xff\x47\xd1\xd7\x12\xdd\x86\x14\x7e\x8f\x4e\x44\x61\x15\x18\x51\x61\x00\x0d\x01\x44\x0d\x0e\x2a\x0c\xe8\xfc\x95\x78\xc8\x6f\x27\x77\xd3\x81\xc8\x3e\x97\xf3\x71\x7e\x93\x3d\x16\xb3\x79\x17\x8b\x72\xde\x90\xb3\x5c\x21\x87\x1b\x32\x98\x26\x18\x54\xd2\x59\x4c\x7a\xae\x18\x79\x13\x9d\x88\x5b\x63\x17\x60\x04\xb0\x16\x3e\x40\x20\xf5\x87\xc6\x75\xf1\x58\xce\xf2\x87\xf9\x78\x5a\x0e\xc4\xf4\x6e\x9c\xcf\x8b\xec\x63\x5e\xf4\x8f\x59\x36\x99\xce\xca\xbf\xca\x1d\xfa\x3d\xa8\x75\xed\xb0\x65\xf9\x8e\xd8\x9e\x72\x72\x3f\x10\x93\x69\x39\xcb\xa6\xd7\xf9\x7c\x32\xfe\x27\x6e\xd3\xb2\xee\x15\xa2\xfc\x19\x55\x19\xc0\x85\xf4\xe8\x33\x69\xbc\x4b\x16\xc4\x7d\x81\xf8\x16\x09\x21\x25\x5b\x8d\x92\xea\xf4\xf4\xf5\xa0\xbc\x3b\x06\x0c\x2c\xd0\xf8\x1e\xec\xda\xde\x0d\xc0\xd4\x4f\x10\x77\xfa\x31\xd9\x84\xd8\x07\x60\x85\x92\x74\x7a\xfa\x7a\x64\xbc\xe7\xaa\xe0\x59\xd6\x56\xb7\x44\x9f\xb2\x2f\xf3\xfb\xbb\x71\xd9\x43\x0e\x57\xe4\x03\xba\xbd\x5e\x1a\x5c\x83\xc7\xc1\x2d\x85\x27\x19\x80\x38\xfc\x32\xd1\x8d\xbb\x2f\x07\x63\xec\x56\xd6\x8e\x36\x64\x70\x85\xba\x63\xe8\x30\x65\x6c\xa3\x65\xed\xec\x86\x34\xba\x14\xb6\xbe\x07\x2c\xb7\x9c\xe8\xa4\x6b\x38\x50\x85\xa9\xb6\x6a\x8d\xae\xef\x1c\xc3\xd6\xba\xb5\xac\x4d\xb3\x22\x4e\x15\x53\x5f\xc7\x24\x17\xc4\x52\x93\x4b\x13\x5b\x87\x44\x31\xb5\x23\x3d\x82\x95\xe5\x65\x87\xb7\x2b\x6a\x71\xc6\x10\xeb\x43\x46\x6d\xb5\x24\x5e\x3a\x38\xb2\x40\x15\xac\x30\xbd\x3c\x1b\x8e\xce\xce\xcf\x47\x17\xa3\x0f\xc3\x58\xaf\x5d\x8c\xca\xc5\xa7\xaf\x6f\xcf\x7a\x17\xc3\xfe\x7f\x81\xad\x8f\x95\xad\xda\x2b\x48\x6a\x68\x3c\x4a\xa8\xf4\xe5\xe8\xea\x22\x3e\x3f\x88\xb5\x7b\x6e\xed\xd0\xea\xcd\xbd\x74\xe1\xf8\x05\x2a\xf3\x7b\x24\xef\x25\xb6\x87\xd5\x66\x45\x3f\x03\x00\x00\xff\xff\x5c\x6d\xc6\x40\xdd\x03\x00\x00")

func _10EkscltAl2ConfBytes() ([]byte, error) {
	return bindataRead(
		__10EkscltAl2Conf,
		"10-eksclt.al2.conf",
	)
}

func _10EkscltAl2Conf() (*asset, error) {
	bytes, err := _10EkscltAl2ConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "10-eksclt.al2.conf", size: 989, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bootstrapAl2Sh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x92\xc1\x6e\xd3\x40\x10\x86\xef\xf3\x14\x3f\x26\x87\x44\x68\xb3\x80\x0a\x52\x1b\x05\xa9\x22\x41\x8a\x04\x69\xa4\xf6\x00\x8a\x82\xb5\xb1\x27\x8d\xd5\xcd\xae\xe5\x1d\x97\x56\xc1\x3c\x3b\x72\xe2\x04\x57\xf4\x50\xe8\xc9\xf6\xef\x99\x6f\xb5\xdf\xcc\xcb\x17\x7a\x99\x39\xbd\x34\x61\x0d\xc5\x44\xab\xd2\x25\x92\x79\x87\x6b\x96\x78\x63\xee\xe2\xdc\xa7\xa1\xdb\xc3\x96\x80\x2f\xe7\x5f\xe3\xd9\xc5\xe8\x32\xfe\x34\xf9\x3c\x1e\x46\x9a\x25\xd1\x7c\x13\x12\xb1\xfa\x50\x19\x6f\x4c\xde\x97\x3b\x89\x08\xb8\x2e\x38\x47\xd4\xd9\x4e\xa6\x97\x57\xe7\xd3\x8f\xe3\xf8\xea\xdb\x6c\x5c\x45\x75\xf4\x80\x54\x45\xf8\x89\x1f\xeb\xcc\x32\x0a\x36\x29\x32\x17\xc4\xb8\x84\x63\xb9\xcf\x19\x35\x75\x80\xd4\x13\x01\x40\xb6\x02\xe6\xf3\x1a\x51\xe7\x55\x84\xe1\x2f\x7c\x9f\xbf\x56\xa7\x8b\x57\x1d\x2c\x16\x18\x40\xd6\xec\x76\xa5\x00\x27\x6b\x8f\xa6\x72\xd0\x64\x05\x4b\x59\xec\x0b\x56\x19\x06\x7b\x6a\xea\x1d\x53\x45\x34\xbd\x18\x8d\xe3\xc9\x6c\xd8\xe9\x26\x65\x61\xa1\x54\xc8\x2c\x3b\xc1\x5a\x24\x3f\xd3\xfa\xcd\xfb\xd3\xfe\xdb\x77\x27\xfd\xe6\xa9\xad\x11\x0e\xa2\x37\x2c\x46\xa5\x46\x8c\xb6\x3e\x31\x56\x65\xf9\xed\x49\x8f\x8e\xb7\x9e\x8c\xfe\x9b\x77\x30\xa1\xb2\xb4\x05\xac\x35\x3e\x1f\x59\xcb\xed\x11\x05\x5f\x16\x09\xa3\x3d\xcb\x9b\x72\xc9\x96\xa5\xcf\xee\x96\xe8\x30\xa9\xe1\x9f\xa1\x9d\xa9\x4e\xb7\xbd\x1d\xbd\x8a\x28\xb0\x40\x79\x38\x5f\xba\xc0\x42\xb4\x53\x1f\x1d\x7d\x6e\x9b\xb7\x2a\xc2\x87\x47\xcf\xda\x99\xdb\x9d\xb8\xef\x7c\x60\x6f\xdb\xfa\xaa\x09\xff\x88\xd8\xfb\xfa\x6b\x0d\x9f\x88\x79\x44\xc0\x53\x9a\x29\xdc\x07\xe1\x4d\x22\x16\xa9\xe1\x8d\x77\xaa\x60\xeb\x4d\xda\xca\xd9\x99\xa5\x65\x34\xbd\xad\x1f\x41\x4c\x21\xc7\xfc\x77\x00\x00\x00\xff\xff\x5e\xca\x96\x59\xa2\x03\x00\x00")

func bootstrapAl2ShBytes() ([]byte, error) {
	return bindataRead(
		_bootstrapAl2Sh,
		"bootstrap.al2.sh",
	)
}

func bootstrapAl2Sh() (*asset, error) {
	bytes, err := bootstrapAl2ShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bootstrap.al2.sh", size: 930, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bootstrapUbuntuSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x55\x6d\x6f\xdb\x36\x10\xfe\xae\x5f\x71\x73\x0d\x2c\xc1\x4a\x29\x49\xd3\x02\x4d\xa0\x61\x5e\xed\x0e\xc6\xb2\xa4\xa8\x5d\x74\x43\x90\x19\x67\xf2\x64\x11\xa6\x48\x81\x3c\xd9\x4d\x33\xef\xb7\x0f\xb4\x2c\xc7\x29\xb0\x97\x0e\xf9\x10\xeb\xee\xb9\xe7\x4e\xf7\xf2\xe8\xd9\x37\xd9\x5c\xdb\x6c\x8e\xa1\x04\x41\x49\x52\x34\x56\xb2\x76\x16\x16\xc4\xb3\x0a\x3f\xcd\x6a\xa7\xc2\xd1\x31\x3c\x24\x00\xbf\x0c\x7e\x9d\xbd\xbb\x19\x4e\x66\x6f\xc7\x57\xa3\xbc\x97\x11\xcb\x8c\x96\x41\xb2\xc9\x3a\xe4\xac\xc2\x3a\xe5\x4f\xdc\x4b\x00\x16\x9e\x6a\xe8\xf5\x1f\xc6\xd7\x93\xe9\xe0\xfa\xcd\x68\x36\xfd\xed\xdd\x68\xd3\x8b\xa6\x27\x4c\x9b\x1e\xfc\x01\xeb\x52\x1b\x02\x4f\xa8\x40\xdb\xc0\x68\x25\xcd\xf8\xbe\x26\x88\xac\x97\xa0\x5c\x92\x00\x00\xe8\x02\xe0\xf6\x36\x52\x44\xfb\xa6\x07\xf9\x9f\xf0\xfb\xed\x89\x78\x7d\xf7\x5d\x1f\xee\xee\xe0\x12\xb8\x24\xbb\x85\x02\x90\x2c\x1d\xec\x90\x97\x3b\x9b\x27\x6e\x7c\x0b\x28\x34\x5c\xb6\xac\xca\x59\x4a\x36\x49\x92\x6c\x23\x7a\xd7\x37\xc3\xd1\x6c\xfc\x2e\xef\x1f\xc9\xc6\x1b\x10\x22\x68\x43\x96\xa1\x64\xae\x2f\xb2\xec\xf4\xd5\xeb\xf4\xec\xe5\x79\xba\xfb\x9f\x19\x64\x0a\x9c\x55\xc4\x28\x14\x32\x66\xc6\x49\x34\x42\xd7\xab\xf3\xe3\x1e\x7c\x0f\x87\x7d\x5a\x36\x73\x32\xc4\xe9\x16\x92\x92\x5d\xed\x52\xee\x7b\x34\x1e\xfe\xef\xb4\x5d\xdf\x84\x56\x31\xef\x57\x26\x8e\xc3\xd9\xa7\x0e\x5f\x9f\x34\x0e\xeb\xbf\xa4\x4d\x82\xc5\x1a\xd0\x68\x0c\xb0\xf3\x0a\x5a\x86\x74\xf7\xbb\xb3\x7d\x09\x93\x6c\xf6\x30\xc9\xa6\xb3\xb5\xb0\xc0\xae\x3e\x24\x4b\xc2\x7d\x60\xaa\x22\xce\x53\x20\x16\x05\x6a\x43\x2a\x49\x8e\x12\x80\x67\x30\xbd\x19\xde\x5c\xc4\x45\x09\x04\xa1\x74\x8d\x51\x30\x27\x30\xce\x2d\x49\x01\x32\xd0\x8a\xfc\x3d\xb0\xae\xa8\x23\x85\xc0\xe8\x39\x40\x53\x3f\xdf\x32\xac\x4b\x2d\x4b\xd0\x01\xd6\x25\x32\xac\x09\x94\x03\x6d\x61\x70\x75\x06\x47\x7b\xdf\x1c\x03\x29\x70\x16\x6a\x83\xda\x42\x5b\x93\x6a\x09\xd0\x2a\xa8\x08\x2d\x03\xbb\x98\xbc\x76\x9e\x71\x6e\x28\x3e\x56\x2e\x70\x87\x06\xa5\x03\x7b\x17\x8e\x9f\xc3\xbc\x61\xd0\xfc\x6d\xd8\xc6\x5b\xc7\x20\x0d\xa1\x87\xd2\xad\x63\x90\x71\xa8\x76\xaf\x54\x78\x57\x3d\x16\x1e\xfb\xb3\xd6\x5c\xba\x86\xa1\xc4\x95\xb6\x8b\x2d\x01\x3b\x90\x4d\x60\x57\xe9\x40\x31\xae\x05\x6a\x0e\x64\x8a\x04\x20\xb8\xc6\x4b\xfa\x97\x51\xfe\x23\xec\x6f\x01\x71\x77\xe2\xea\xb4\xdb\xf0\xa8\x2a\xf9\xa3\x2c\x5c\x88\xfe\xd1\xa1\xfe\x1c\x6f\x22\x15\x31\x08\x07\xd6\x35\x36\x10\xc7\xc8\xc2\xe0\x22\xe4\x47\xdb\x13\xee\xa1\x52\x9e\x42\xc8\x4f\xd2\xed\x5f\xaf\xb5\x5a\xa7\x48\xe8\x3a\xef\x3f\xec\x8e\x7a\xb3\x73\x48\xd3\x04\x26\x2f\x94\x0d\x79\xff\xe1\xcd\xd5\x87\xc9\x74\xf4\x7e\x36\xbc\x9e\x74\x80\x0a\x3f\x89\x98\xfb\xa0\xac\xcd\x21\xa9\xc1\x39\x99\xd0\x11\x5f\x0d\x7e\x1c\x5d\x4d\x36\xcf\xd1\xd4\x25\xa6\xed\x9b\xa6\xda\x1d\xde\x64\x7e\xa0\x84\xe3\x61\xc7\x85\x4d\x14\x2c\xd6\x12\xa3\xea\x0a\x76\x4b\xb2\x62\x4d\xf3\xd2\xb9\x65\xce\xbe\xa1\x03\x9c\xf3\xfa\x73\x0b\xab\x9c\xa2\xfc\x63\x8b\xea\x00\xc6\xb8\xb5\xa8\xbd\x5e\x69\x43\x0b\x52\x87\xc1\xb5\x53\x42\xdb\xc2\xa3\x90\xce\x32\x6a\x4b\x5e\xe8\x0a\x17\x94\xbf\x3a\x39\x3b\x3f\x39\x3d\x3d\x7f\x71\xfe\xf2\x2c\x55\x4b\x9f\x92\xf4\x69\xff\x61\xf0\x71\x32\x1b\x8e\xde\x0e\x3e\x5c\x4d\x67\xef\x47\x3f\x8d\x6f\xae\x37\x29\x56\xf8\xd9\x59\x5c\x87\x54\xba\x2a\x0e\x33\xab\xb1\x09\x24\xb0\x52\xaf\xce\x2f\x5e\xa4\xa7\xfb\xce\xba\x46\x89\xda\xbb\x95\x56\xe4\x73\x5c\x87\x2f\x5b\xee\x2a\xd4\x36\xdf\x3d\xb6\xfb\xd4\x41\xac\x16\x73\x6d\x85\xd2\x3e\xcf\x5c\xcd\x99\xb4\x3a\x7e\x9f\x0e\xdc\xd2\xd9\xa2\xf5\xc7\x9d\x8a\x7e\x4b\x9c\xaa\x0e\xb1\x7f\x3f\xdf\xd8\x78\xc1\xb9\x72\x72\x49\xbe\x9b\x1c\xf1\xda\xf9\xa5\xa8\x4d\xb3\x88\x25\x58\xdd\xc5\x2d\xbc\x6b\x6a\xa1\xbc\x5e\x91\xcf\xdb\xa7\xa2\x2b\xdc\xd3\x42\x6f\x2b\x8f\x83\x3f\xec\xeb\xde\x11\x0f\x4c\xc4\xc4\xbc\xdf\x88\xe9\x60\x7c\x3d\xdd\xaf\xcc\x56\xae\x9c\x2d\xf4\x22\xff\xf2\x58\x5a\x73\x7a\x8f\x55\xd7\x85\x82\x90\x1b\x4f\x62\x11\xc5\x36\x7f\xef\x18\x99\x7e\x6e\xcf\x6a\x42\x7e\x45\xfe\x0d\x79\xd6\x45\xdc\x99\x27\xe5\xa0\x75\xf6\xbe\x72\x4d\x10\x71\x5b\xf2\x02\x4d\xa0\x7d\xef\x35\x59\x16\x12\x45\xa1\x0d\x3d\xa9\x41\x62\x2a\xfd\xf6\x83\x7d\x1c\x8f\xaa\x15\xd4\x47\x21\x8e\x7a\x1a\xbf\xb7\xdb\x63\xbb\xfd\xe1\x6e\xd3\x4b\x8e\x93\x4e\x76\xd1\x3f\xc1\x25\x7f\x05\x00\x00\xff\xff\x75\xc8\xf1\xbd\x4e\x08\x00\x00")

func bootstrapUbuntuShBytes() ([]byte, error) {
	return bindataRead(
		_bootstrapUbuntuSh,
		"bootstrap.ubuntu.sh",
	)
}

func bootstrapUbuntuSh() (*asset, error) {
	bytes, err := bootstrapUbuntuShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bootstrap.ubuntu.sh", size: 2126, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cut_scriptSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8e\x4d\x4b\xf4\x30\x14\x85\xf7\xe7\x57\x9c\xb7\x6f\x61\x14\x29\x11\x77\x52\xba\x10\xdc\x8a\x82\x1b\xa1\xd4\x4e\xa6\xb9\x9d\x84\xda\xa4\xa4\xa9\x1f\xf8\xf1\xdb\xa5\x23\x03\xee\x5c\xde\xfb\xf0\x3c\x9c\xff\xff\xd4\x32\x47\xb5\x73\x5e\x89\x7f\xe6\x4e\xcf\x16\xa3\x7e\x6d\xa7\x60\xe6\x2a\xcb\x4a\x00\xb8\xb9\x7a\x68\xef\x6e\xaf\xef\xab\xed\x5e\x52\x7b\xa4\x5b\x00\xd2\xd9\xc0\xfc\xc8\x81\x7d\x94\x89\xc9\x46\x11\x2a\x1b\x46\x51\xa3\x8e\xc9\x79\xad\x86\x61\x18\xf8\xc1\x6e\x49\x2c\x7a\x5e\xb0\x30\xdc\x70\x83\x7e\xf1\x5d\x72\xc1\xf3\x77\xf8\xe4\x94\xef\x7f\x96\x5e\xac\x7b\x12\x46\xd1\x86\xe9\x6d\x12\xae\x62\x49\x13\x00\xd2\xf5\x64\x5d\x33\xcb\xd7\x67\xc6\xea\x8b\x8f\xf5\x79\x71\xd9\x9c\xe5\x6c\x1a\x96\x4c\x56\x3c\x48\xf2\x67\xfe\x41\x3d\xdc\x51\xd2\x12\x57\xd4\x3b\x96\x30\xc1\x0b\x3e\x01\x7c\x07\x00\x00\xff\xff\x81\x91\x6a\x6b\x24\x01\x00\x00")

func cut_scriptShBytes() ([]byte, error) {
	return bindataRead(
		_cut_scriptSh,
		"cut_script.sh",
	)
}

func cut_scriptSh() (*asset, error) {
	bytes, err := cut_scriptShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cut_script.sh", size: 292, mode: os.FileMode(493), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _kubeletYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x91\x4f\x4f\xc3\x30\x0c\xc5\xef\xf9\x14\xfe\x04\x6d\x07\x9a\x04\xb9\x8d\x4d\x70\x60\x27\x36\xe0\xec\xa6\xee\x16\x35\x8d\x27\xc7\x19\x7f\x3e\x3d\x5a\x5a\x90\x26\xa1\x9c\x9e\xde\xb3\xdf\x4f\xce\xe0\x63\x67\xe1\x39\xb7\x14\x48\xd7\x1c\x7b\x7f\xc8\x82\xea\x39\x1a\x3c\xf9\x37\x92\xe4\x39\x5a\x18\xa6\x40\xe5\x4a\xa2\x1a\xee\x52\xe5\xb9\x3e\x2f\x5a\x52\x5c\x18\x83\x5d\x27\x94\x92\x85\xa6\x2a\xcf\xb8\x90\x93\x92\x6c\x78\x44\x1f\x2d\xcc\xb2\x0a\xec\x30\x18\x83\x59\x8f\x14\xd5\xbb\x52\x64\x0d\x00\x46\x8e\x5f\x23\xe7\x74\x11\x00\x14\xb1\x0d\xd4\x59\xe8\x31\x24\x32\x00\x1f\xd4\x1e\x99\x87\xc9\x75\xe8\x8e\xb4\xdf\x6f\x2d\xdc\x8c\x4d\xba\x1e\x50\xc9\x97\xfc\xe7\xb2\xb9\x9f\xc3\xc1\x53\xd4\xf5\xea\xd1\x07\xb2\x50\x93\xba\x9a\x86\xe4\x34\xd4\x0e\x2b\x27\x3a\xd1\xb0\xf8\xef\x3f\x98\x91\x3b\xb2\xf0\x3e\x55\xfe\x5b\xbe\x9a\x47\xa8\x2b\x18\xcb\x5f\x8c\x62\xbe\x46\xbc\xb6\x6f\x9b\x64\x4c\x22\x39\x93\xec\xb7\xbb\x07\x66\x4d\x2a\x78\x9a\x61\x8d\x3b\x08\xe7\xd3\x46\xfc\x99\xc4\xc2\xa4\xfa\x64\x4c\x4f\xa8\x59\xe8\x09\x95\xca\x59\x5e\x58\x51\x69\xfe\xaa\x5d\x59\xb7\x26\x51\xdf\x5f\xee\x48\xf3\xb6\x9f\x00\x00\x00\xff\xff\x1f\x2f\xa9\x0f\xd0\x01\x00\x00")

func kubeletYamlBytes() ([]byte, error) {
	return bindataRead(
		_kubeletYaml,
		"kubelet.yaml",
	)
}

func kubeletYaml() (*asset, error) {
	bytes, err := kubeletYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kubelet.yaml", size: 464, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _max_pods_mapTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x94\x5d\x0e\xea\x20\x10\x85\xdf\xbb\x0a\x57\x40\x84\x01\x7f\x96\x43\x4a\xad\x24\xe2\x6d\x46\x6f\x62\xee\xea\x6f\x5a\x6d\x7b\xce\xbc\x71\x2c\x7c\xfc\xcc\x37\x66\xef\xda\x50\xea\xdf\x76\xb8\x74\xd9\xbb\x47\xd6\x71\x38\x84\xeb\x3c\xfe\x7c\x43\x5a\x3e\x04\x4a\xf1\x97\x82\xc4\xae\xdf\x08\x3e\xcc\x61\x9f\xd8\xcb\xce\xeb\x85\x3f\x04\x4a\xc4\x13\x77\xc1\x18\x01\x12\x11\x12\x09\x12\x19\x12\x19\x92\x00\x92\x10\x92\x08\x92\x18\x92\xdc\x95\xa3\x5f\xa1\x67\x39\x77\x7d\x2a\x48\x2d\x84\x2d\xcc\x2d\x06\x5c\x0c\xb9\x18\x74\x1f\xf8\xfc\xea\x29\x97\x00\x9b\x95\x80\x7b\x95\x40\x5b\x15\x06\xdd\xa8\x92\x37\xae\xe4\xcd\x3b\x7f\x5a\x73\x0c\xdd\x48\xe0\x91\x49\xa3\xbc\xe0\x0c\x23\xd7\x70\x14\x33\x77\x07\xc7\x14\xba\x3b\x9d\xe2\xce\xa7\xb8\xf3\x55\xef\xde\xac\x7d\xf1\xf7\x8a\x4f\x51\xe9\xc4\x95\x9f\xa2\xf2\x05\x2a\xd8\x59\xd1\xce\x4a\x76\x56\xbe\x59\x15\x0b\xa1\xd3\x55\x71\x6d\x78\xe7\xc7\x52\xc5\xe6\xdd\xab\xe5\xc7\xe3\x70\x99\x87\x7b\x93\x34\xe8\xb3\x86\x0d\xd3\x02\x87\xf5\x18\xde\x2f\x11\xcf\xd1\x04\x81\x70\x95\x86\x57\x69\xc2\x8c\xad\x97\x8e\xf3\x18\xe6\x51\x2f\x35\xee\xa5\x16\x9d\x3f\x9a\x7c\xc2\x0c\xcd\xd5\xb0\xb9\x1a\x35\x57\xe3\xe6\x6a\xc9\xf9\xc0\x39\x44\x68\x81\x96\x32\x62\x33\x71\x33\x83\xb3\x21\x67\x8b\xce\x96\x5d\x90\x5d\x88\x5d\x98\x5d\x0c\xbb\x58\x76\x61\xf6\x84\x35\x9c\x58\xb9\x29\xf0\xcb\x4d\x64\xda\xc4\x6a\x4d\x62\x27\x97\x27\x6f\xa5\x50\x76\xc5\xb2\x2b\x71\x95\x0d\x56\xde\x46\xe1\xff\x55\xd1\x09\x25\x27\x94\x9d\xd0\x68\x21\xd4\x06\x0a\x4a\x28\x2a\xa1\xa4\x84\xb2\x12\x6a\x94\x50\xa3\x84\xa2\x12\x4a\x4a\x28\x2b\xa1\x46\x09\xb5\x4a\xa8\x55\x42\x51\x09\x25\x25\x94\x95\x50\xa3\x84\x5a\x25\xd4\x2a\xf1\xf6\xae\xd5\x5e\xff\x1c\x62\xf7\x0e\xee\x99\x9f\xbf\x11\xfc\xf8\xfd\x9f\xf0\x7e\xf9\xf9\xd7\xd7\xe7\x39\x7c\x29\x92\xe6\xf1\xfa\xc0\xcb\x8a\x00\x49\x36\xa8\xec\x50\x01\xa8\x20\x54\x00\x8a\xd6\xbc\xc9\x9a\x8f\x67\xfd\x3e\xde\x49\xa0\x3c\xac\x6b\xc3\x75\x49\xb4\x78\xd8\xde\xe8\x17\x2f\x1c\x0d\x7b\x60\xf8\x3f\x0f\xd5\x98\xc3\xbe\x78\x4e\x81\xa3\x98\x95\x27\x93\xb7\xea\xcc\xc5\xf8\x1f\x00\x00\xff\xff\x32\x25\x3f\xaa\xf1\x08\x00\x00")

func max_pods_mapTxtBytes() ([]byte, error) {
	return bindataRead(
		_max_pods_mapTxt,
		"max_pods_map.txt",
	)
}

func max_pods_mapTxt() (*asset, error) {
	bytes, err := max_pods_mapTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "max_pods_map.txt", size: 2289, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"10-eksclt.al2.conf": _10EkscltAl2Conf,
	"bootstrap.al2.sh": bootstrapAl2Sh,
	"bootstrap.ubuntu.sh": bootstrapUbuntuSh,
	"cut_script.sh": cut_scriptSh,
	"kubelet.yaml": kubeletYaml,
	"max_pods_map.txt": max_pods_mapTxt,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"10-eksclt.al2.conf": &bintree{_10EkscltAl2Conf, map[string]*bintree{}},
	"bootstrap.al2.sh": &bintree{bootstrapAl2Sh, map[string]*bintree{}},
	"bootstrap.ubuntu.sh": &bintree{bootstrapUbuntuSh, map[string]*bintree{}},
	"cut_script.sh": &bintree{cut_scriptSh, map[string]*bintree{}},
	"kubelet.yaml": &bintree{kubeletYaml, map[string]*bintree{}},
	"max_pods_map.txt": &bintree{max_pods_mapTxt, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

